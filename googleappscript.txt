function incrementAddressID() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Main');
  var data = sheet.getDataRange().getValues();
  var nextID = data.length;
  for (var i = 1; i < data.length; i++) {
    if (data[i][0] === '') {
      sheet.getRange(i + 1, 1).setValue(nextID);
      nextID++;
    }
  }
}

function updateLatestVisitAndNotes() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var mainSheet = ss.getSheetByName('Main');
  var visitsSheet = ss.getSheetByName('Visits');

  var mainData = mainSheet.getRange(2, 1, mainSheet.getLastRow() - 1, 2).getValues(); // Assuming the AddressID is in column A
  var visitData = visitsSheet.getRange(2, 1, visitsSheet.getLastRow() - 1, 4).getValues(); // Assuming AddressID, VisitDate, VisitNotes, InactiveFlag are in columns A, B, C, D respectively

  // Create a map to track the latest visit date and notes for each AddressID
  var latestVisitsMap = new Map();

  // Loop over each row in the visits data
  visitData.forEach(function(row) {
    var addressID = row[0];
    var visitDate = new Date(row[1]);
    var visitNotes = row[2];
    var inactiveFlag = row[3];
    
    // If this is the first visit for this AddressID or if the visit date is later than the one we have, update the map
    if (!latestVisitsMap.has(addressID) || visitDate > latestVisitsMap.get(addressID).visitDate) {
      latestVisitsMap.set(addressID, {visitDate: visitDate, visitNotes: visitNotes, inactiveFlag: inactiveFlag});
    }
  });

  // Loop over each row in the main data
  mainData.forEach(function(row, index) {
    var addressID = row[0];
    var latestVisit = latestVisitsMap.get(addressID);

    // If we have a latest visit for this AddressID, update the main sheet
    if (latestVisit) {
      // Update the last visited date and notes in the Main sheet
      mainSheet.getRange(index + 2, 10).setValue(latestVisit.visitDate); // Assuming LastVisited is column J
      mainSheet.getRange(index + 2, 11).setValue(latestVisit.visitNotes); // Assuming LatestNotes is column K
    }
  });

  // After all changes are made to the spreadsheet and before the function exits:
  SpreadsheetApp.flush(); // Apply all pending changes to the spreadsheet
}


function geocodeAddresses() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Main');
  var dataRange = sheet.getDataRange();
  var data = dataRange.getValues();
  
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var address = row[1] + ' ' + row[2] + ' ' + row[3] + ' ' + row[4]; // Construct the full address from columns B-F
    var geocodeResponse = Maps.newGeocoder().geocode(address);
    
    if (geocodeResponse.status == 'OK') {
      var results = geocodeResponse.results;
      var lat = results[0].geometry.location.lat;
      var lng = results[0].geometry.location.lng;
      
      sheet.getRange(i + 1, 12).setValue(lat); // Set latitude in column L
      sheet.getRange(i + 1, 13).setValue(lng); // Set longitude in column M
    } else {
      Logger.log('Geocode failed for address: ' + address);
    }
  }
}


function doGet(e) {
  // First, we update the latest visits and notes
  updateLatestVisitAndNotes();
  
  // Then we collect all necessary data for the map markers
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Main');
  var dataRange = sheet.getDataRange();
  var data = dataRange.getValues();
  var outputData = [];

  for (var i = 1; i < data.length; i++) { // Skip the header row
    var row = data[i];
    var record = {
      addressID: row[0],
      name: row[6], // Assuming name is in column G
      latitude: row[11], // Assuming latitude is stored in the new column L
      longitude: row[12], // Assuming longitude is stored in the new column M
      lastVisited: row[9], // LastVisited in column J
      latestNotes: row[10] // LatestNotes in column K
    };
    outputData.push(record);
  }

  // Apply all pending changes to the spreadsheet before returning data
  SpreadsheetApp.flush();

  // Return a JSON response containing the map markers data
  return ContentService.createTextOutput(JSON.stringify(outputData))
    .setMimeType(ContentService.MimeType.JSON);
}


// This function will handle POST requests
function doPost(e) {
  var jsonData = JSON.parse(e.postData.contents);
  var action = jsonData.action;
  
  if (action === 'updateLatestVisitAndNotes') {
    // Call your function to update the latest visit and notes
    updateLatestVisitAndNotes();
    return createOutput('success', 'Latest visits and notes updated.');
  }

  if (action === 'addMember') {
    return doPostAddMember(jsonData);
  } else if (action === 'updateVisits') {
    Logger.log('Calling doPostUpdateVisits'); // Additional log to confirm this branch is executed
    return doPostUpdateVisits(jsonData);
  } else {
    throw new Error('Invalid action type: ' + action);
  }
}

function doPostAddMember(data) {
  var lock = LockService.getScriptLock();
  lock.waitLock(30000);
  
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheetByName('Main');
    var nextRow = sheet.getLastRow() + 1;
    
    sheet.appendRow([
      nextRow,
      data.streetAddress,
      data.suburb,
      data.state,
      data.postcode,
      data.country,
      data.name,
      data.background,
      data.language,
      '',
      ''
    ]);
    
    return createOutput('success', nextRow);
  } catch (error) {
    return createOutput('error', error.toString());
  } finally {
    lock.releaseLock();
  }
}

function doPostUpdateVisits(data) {
  var lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000); // Lock for concurrency control
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var visitsSheet = ss.getSheetByName('Visits');
    
    // Append the new visit
    visitsSheet.appendRow([
      data.addressID,
      data.visitDate,
      data.visitNotes,
      data.inactiveFlag ? 'Yes' : 'No'
    ]);
    
    // SpreadsheetApp.flush(); // Apply the changes to the spreadsheet if needed
    
    Logger.log('doPostUpdateVisits: Row appended to Visits sheet'); // Confirm row append
    
    return createOutput('success', 'Visit updated successfully.');
  } catch (error) {
    Logger.log('doPostUpdateVisits: Error - ' + error.toString()); // Log any errors
    return createOutput('error', error.toString());
  } finally {
    lock.releaseLock();
  }
}

function createOutput(result, data) {
  var output = {
    'result': result,
    'data': data
  };
  
  return ContentService.createTextOutput(JSON.stringify(output))
    .setMimeType(ContentService.MimeType.JSON);
}
